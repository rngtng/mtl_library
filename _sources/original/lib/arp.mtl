// ------------- IP

fun strputchk s i w=
  strset s i ~(w>>8);
  strset s i+1 ~w;
  0;;

// ------------- DEBUG
fun MACecho src i0 ln=
  for i=0;i<6 do (Secho ctoh strget src i0+i; Secho ".");  if ln then Secholn "";
  src;;

fun SEQecho src i0 ln=
  for i=0;i<4 do (Secho ctoh strget src i0+i; Secho ".");  if ln then Secholn "";
  src;;

fun IPecho src i0 ln=
  for i=0;i<4 do (Iecho strget src i0+i; Secho ".");if ln then Secholn "";
  src;;

fun itoh4 i = strcatlist (ctoh i>>24)::(ctoh i>>16)::(ctoh i>>8)::(ctoh i)::nil;;

fun dump s=
  for i0=0;i0<strlen s;i0+16 do
  (
    //Secho itoh4 i0;
    Secho " ";
    for i=0;i<16 do let strget s i0+i -> c in
    (
      Secho if c==nil then "  " else ctoh c;
      Secho " "
    );
    Secho " ";
    for i=0;i<16 do let strget s i0+i -> c in
    (
      Secho if c==nil then "  " else if c<32 then "." else ctoa c
    );
    Secholn ""
  );
  s;;

fun dumpscan l0=
  Secholn "## DUMPSCAN >>>>";
  for l=l0;l!=nil;tl l do
  let hd l->[ssid mac bssid rssi channel rateset encryption] in
  (
    Secho "## SCAN "; Secholn ssid;
    Secho "mac:"; MACecho mac 0 1;
    Secho "bssid:"; MACecho bssid 0 1;
    Secho "rssi:"; Iecholn rssi;
    Secho "channel:"; Iecholn channel;
    Secho "rateset:"; Iecholn rateset;
    Secho "encryption:"; Iecholn encryption
  );
  l0;;

// ------------- ARP
const ARPREQ=1;;
const ARPANS=2;;

var netip="\192\168\1\117";;
var netmask="\255\255\255\0";;
var netgateway="\192\168\1\1";;
var netdns="\192\168\1\1";;

var mymac;;

var macbroadcast="\$ff\$ff\$ff\$ff\$ff\$ff";;
var ipbroadcast="\$ff\$ff\$ff\$ff";;

var netip_empty="\0\0\0\0";;

var larp;;
var larpreq;;

fun mkarp op ipsrc macdst ipdst=
  strcatlist
  "\$aa\$aa\$03\$00\$00\$00\$08\$06\$00\$01\$08\$00\$06\$04\$00"::(ctoa op)::
  mymac::
  netip::
  macdst::
  ipdst
  ::nil;;

fun sendarp ip=
  netSend (mkarp ARPREQ netip macbroadcast ip) 0 nil macbroadcast 0 1;;


fun filterarpip l src =
  if l!=nil then let hd l->[ip _ _] in if !vstrcmp src 8+14 ip 0 4  then filterarpip tl l src
  else (hd l)::filterarpip tl l src;;

fun checkarp l src=
  if l!=nil then let hd l->[ip _ cb] in
  (
    if !vstrcmp src 8+14 ip 0 4 then
    let strsub src 8+8 6 -> mac in
    (
      //Secho "found MAC target : "; MACecho mac 0 1;
      set larp=[ip mac]::larp;
      call cb [mac]
    );
    checkarp tl l src
  );;

fun cbnetarp src mac=
  Secho "<a";
  let strget src 8+7-> op in
  if op==1 then // req
  (
    // Secho "ask ";MACecho src 16+10 1; IPecho src 16+16 1;
    if !vstrcmp src 32 netip 0 4 then
      netSend (mkarp ARPANS netip strsub src 16 6 strsub src 22 4) 0 nil mac 0 1;
    nil
  )
  else if op==2 then
    let larpreq->l in
    (
      set larpreq=filterarpip larpreq src;
      checkarp l src
    );;

fun subnet_ ip i=
  if i<0 then 1
  else if ((strget ip i)^(strget netip i))&(strget netmask i) then 0
  else subnet_ ip i-1;;

fun subnet ip=
  Secho "test subnet ";
  IPecho ip 0 1;
  Iecholn subnet_ ip 3;;


fun arpreq ip cb=
  let IPecho (if subnet ip then ip else netgateway) 0 1 -> ip in
  let listswitchstr larp ip -> mac in
  if mac!=nil then call cb [mac]
  else
  (
    sendarp ip;
    set larpreq=[ip time cb]::larpreq;  // ### attention Ã  la taille de la liste
    0
  );;

fun filterarp l dt =
  if l!=nil then let hd l->[ip t _] in if (time-t)>dt then filterarp tl l dt
  else
  (
    sendarp ip;
    (hd l)::filterarp tl l dt
  );;

fun arptime =
  set larpreq=filterarp larpreq 10;;

fun resetarp=
  set larp=nil;
  set larpreq=nil;
  0;;
